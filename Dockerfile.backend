# Use the NVIDIA CUDA 12.4 base image with Ubuntu 20.04
FROM nvidia/cuda:12.4.0-devel-ubuntu20.04

# Set environment variables for CUDA libraries and other NVIDIA-related components
ENV CUDA_VERSION=12.4.0
ENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Set timezone and configure tzdata in non-interactive mode
ENV TZ=Etc/UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    DEBIAN_FRONTEND=noninteractive apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.11 python3.11-venv python3.11-dev python3-pip gcc g++ cmake && \
    rm -rf /var/lib/apt/lists/*

# Set up Python 3.11 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
RUN update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# Upgrade pip to the latest version
RUN pip install --upgrade pip

# Set the working directory to /app/backend
WORKDIR /app/backend

# Copy requirements.txt from the backend folder and install dependencies
COPY backend/requirements.txt .
RUN pip install -r requirements.txt

# Install llama-cpp-python with CUDA support
RUN CUDACXX=/usr/local/cuda-12/bin/nvcc CMAKE_ARGS="-DGGML_CUDA=on -DCMAKE_CUDA_ARCHITECTURES=all-major" FORCE_CMAKE=1 \
    pip install llama-cpp-python --no-cache-dir --force-reinstall --upgrade

# Copy the backend source code
COPY backend/ .

# Expose the backend port for FastAPI
EXPOSE 8000

# Start FastAPI server
CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
